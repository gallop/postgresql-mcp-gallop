#!/usr/bin/env node

import { spawn } from 'child_process';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// Ëé∑ÂèñÂΩìÂâçÊñá‰ª∂ÁöÑÁõÆÂΩï
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const projectRoot = join(__dirname, '..');
const mainScript = join(projectRoot, 'dist', 'index.js');

console.log('üîç MCP Client Debug Test');
console.log('=====================');
console.log(`Main script path: ${mainScript}`);

// ÂàõÂª∫‰∏Ä‰∏™ÁÆÄÂçïÁöÑJSON-RPC 2.0ËØ∑Ê±Ç
const testRequest = {
  jsonrpc: '2.0',
  id: 1,
  method: 'listTools',
  params: {}
};

// ÂêØÂä®MCPÊúçÂä°Âô®ËøõÁ®ã
console.log('üöÄ Starting MCP server process...');
const serverProcess = spawn('node', [mainScript], {
  stdio: ['pipe', 'pipe', 'pipe'],
  env: {
    ...process.env,
    LOG_LEVEL: 'debug',  // ‰ΩøÁî®debugÁ∫ßÂà´‰ª•Ëé∑ÂèñÊõ¥Â§ö‰ø°ÊÅØ
    LOG_FORMAT: 'text'
  }
});

// ËÆæÁΩÆË∂ÖÊó∂
const timeout = setTimeout(() => {
  console.error('‚ùå Test timed out after 10 seconds');
  serverProcess.kill();
  process.exit(1);
}, 10000);

// Â§ÑÁêÜÊúçÂä°Âô®Ê†áÂáÜËæìÂá∫
console.log('üëÇ Listening for server stdout...');
serverProcess.stdout.on('data', (data) => {
  const dataStr = data.toString().trim();
  console.log(`üì§ Server stdout: [${dataStr}]`);
  
  try {
    // Â∞ùËØïËß£ÊûêJSON
    const json = JSON.parse(dataStr);
    console.log('‚úÖ Successfully parsed JSON response');
  } catch (e) {
    console.log(`‚ùå Not valid JSON: ${e.message}`);
  }
});

// Â§ÑÁêÜÈîôËØØ
serverProcess.stderr.on('data', (data) => {
  console.error(`‚ùå Server stderr: ${data.toString().trim()}`);
});

serverProcess.on('error', (err) => {
  console.error(`‚ùå Server process error: ${err.message}`);
});

serverProcess.on('close', (code) => {
  clearTimeout(timeout);
  console.log(`üîå Server process closed with code ${code}`);
});

// Á≠âÂæÖÊúçÂä°Âô®ÂêØÂä®
console.log('‚è≥ Waiting 2 seconds before sending request...');
setTimeout(() => {
  // ÂèëÈÄÅÊµãËØïËØ∑Ê±Ç
  console.log('üì§ Sending test request:', JSON.stringify(testRequest));
  serverProcess.stdin.write(JSON.stringify(testRequest) + '\n');
  console.log('üì§ Request sent!');
  
  // 5ÁßíÂêéÂÖ≥Èó≠ËøõÁ®ã
  setTimeout(() => {
    console.log('‚è±Ô∏è Test duration completed');
    serverProcess.kill();
    process.exit(0);
  }, 5000);
}, 2000);